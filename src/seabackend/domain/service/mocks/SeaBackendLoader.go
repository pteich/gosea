// Code generated by mockery v2.0.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/pteich/gosea/src/seabackend/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// SeaBackendLoader is an autogenerated mock type for the SeaBackendLoader type
type SeaBackendLoader struct {
	mock.Mock
}

// LoadPosts provides a mock function with given fields: ctx
func (_m *SeaBackendLoader) LoadPosts(ctx context.Context) ([]entity.RemotePost, error) {
	ret := _m.Called(ctx)

	var r0 []entity.RemotePost
	if rf, ok := ret.Get(0).(func(context.Context) []entity.RemotePost); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.RemotePost)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadUser provides a mock function with given fields: ctx, id
func (_m *SeaBackendLoader) LoadUser(ctx context.Context, id string) (entity.RemoteUser, error) {
	ret := _m.Called(ctx, id)

	var r0 entity.RemoteUser
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.RemoteUser); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.RemoteUser)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadUsers provides a mock function with given fields: ctx
func (_m *SeaBackendLoader) LoadUsers(ctx context.Context) ([]entity.RemoteUser, error) {
	ret := _m.Called(ctx)

	var r0 []entity.RemoteUser
	if rf, ok := ret.Get(0).(func(context.Context) []entity.RemoteUser); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.RemoteUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
