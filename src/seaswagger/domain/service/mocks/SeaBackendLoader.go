// Code generated by mockery v2.0.3. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/pteich/gosea/src/seaswagger/infrastructure/models"
	mock "github.com/stretchr/testify/mock"
)

// SeaBackendLoader is an autogenerated mock type for the SeaBackendLoader type
type SeaBackendLoader struct {
	mock.Mock
}

// LoadPosts provides a mock function with given fields: ctx
func (_m *SeaBackendLoader) LoadPosts(ctx context.Context) ([]*models.Post, error) {
	ret := _m.Called(ctx)

	var r0 []*models.Post
	if rf, ok := ret.Get(0).(func(context.Context) []*models.Post); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadUser provides a mock function with given fields: ctx, id
func (_m *SeaBackendLoader) LoadUser(ctx context.Context, id string) (*models.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadUsers provides a mock function with given fields: ctx
func (_m *SeaBackendLoader) LoadUsers(ctx context.Context) ([]*models.User, error) {
	ret := _m.Called(ctx)

	var r0 []*models.User
	if rf, ok := ret.Get(0).(func(context.Context) []*models.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
